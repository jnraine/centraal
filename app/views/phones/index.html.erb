<% @phones.each do |phone| %>
    <div class="phone">
        <h4>
          <%= icon(name: "caret-right", class: "expand-icon") %>
          <span class="incoming-number"><%= phone.incoming_number %></span>
        </h4>

        <div class="details well">
            <%= render partial: "call_form" %>
            
            <hr>

            <h5>Voicemail Greeting</h5>
            <div class="voicemail-greeting">
                <% if phone.voicemail_greeting.present? %>
                    <%= icon name: "play", class: "audio-control icon-2x" %>
                    <%= content_tag :audio do %>
                      <source src="<%= phone.voicemail_greeting %>" type="audio/mpeg">
                    <% end %>
                <% else %>
                    <em>Call <%= phone.incoming_number %> from your forwarding number to record a greeting.</em>
                <% end %>
            </div>
            <hr>
            
            <%= render partial: "voicemail_listing", locals: {phone: phone} %>
            
            <hr>

            <%= bootstrap_form_for phone, class: "form-horizontal" do |f| %>
              <%= f.text_field :forwarding_number %>
              <%= f.on_off :forwarding, labelled: true %>
              <%= f.on_off :voicemail, labelled: true %>
              <%= f.save_changes %>
            <% end %>
        </div>
    </div>
<% end %>

<br>

<%= button icon(name: "refresh", label: "Sync Numbers"), sync_phones_path, method: :post, data: {"spin-on-click" => true, "click-text" => "Syncing..."} %>

<% content_for :inline_js do %>
  <script>
    $(document).ready(function(){
        <% client = Phone.first.present? ? Phone.first.client : OpenStruct.new %>
        Twilio.Device.setup("<%= client.token %>");
        var connection = null;
        var connectedWith = null;
        var callStatusUpdaterInterval = null;
        
        // UI Fanciness
        $(document).on("click", "#start-call", function() {
            var outgoingNumber = $("#outgoing-number").first().val();
            params = {"OutgoingNumber" : outgoingNumber};
            connectedWith = outgoingNumber;
            updateStatus("Calling " + connectedWith + "...");
            connection = Twilio.Device.connect(params);
        });

        $(document).on("click", "#hangup", function() {  
            Twilio.Device.disconnectAll();
        });

        $("#call-form").submit(function() {
          $("#start-call").click();
          return false;
        });

        function updateStatus(message) {
            $('#status').text(message);
        }

        function setStatusReady() {
            showButton("start-call");
            updateStatus("Ready to start call");
        }

        // Twilio.Device callbacks
        Twilio.Device.ready(function (device) {
            var pingClient = function() {
                $.post("<%= "/client_ping/#{client.identifier}" %>");
            }

            setInterval(pingClient, 120000); // ping server every 2 minutes
            pingClient();
            setStatusReady();
        });
     
        Twilio.Device.incoming(function (incomingConnection) {
            connectedWith = incomingConnection.parameters.From;
            updateStatus("Incoming call from " + connectedWith + "...");
            showButton("answer");
            $("#answer").click(function() {
                connection = incomingConnection;
                connection.accept();
            });
        });
     
        Twilio.Device.offline(function (device) {
            updateStatus("Offline");
            hideButtons();
        });

        Twilio.Device.cancel(function (cancelledConnection) {
            setStatusReady();
        });
     
        Twilio.Device.error(function (error) {
            console.log("A Twilio error occurred");
            console.log(error);
            updateStatus(error);
        });
     
        Twilio.Device.connect(function (conn) {
            console.log("let's set the call status to time the call");
            startCallStatus();
            showButton("hangup");
        });
     
        Twilio.Device.disconnect(function (conn) {
            stopCallStatus();
        });

        function startCallStatus() {
            var callStartTime = new Date().getTime();
            callStatusUpdaterInterval = setInterval(function() {
                var message = "Connected — " + connectedWith + " — " + timerDisplay(callStartTime);
                updateStatus(message);
            }, 500);
        }

        function stopCallStatus() {
            clearInterval(callStatusUpdaterInterval);
            updateStatus("Call ended");
            setTimeout(setStatusReady, 2000);
            showButton("start-call");
        }

        function hideButtons() {
            showButton("none-that-actually-exist");
        }
         
        function showButton(name){
            $('#start-call').hide();
            $('#hangup').hide();
            $('#answer').hide();
            $('#' + name).show();
        }

        function timerDisplay(startTime) {
            var duration = secondsSinceTime(startTime);
            var minutes = Math.floor(duration / 60);
            var seconds = duration % 60;
            if(seconds.toString().length == 1) {
                seconds = "0" + seconds;
            }
            return minutes + ":" + seconds;
        }

        function secondsSinceTime(time) {
            var seconds = (new Date().getTime() - time) / 1000;
            return Math.floor(seconds);
        }
    });
  </script>
<% end %>