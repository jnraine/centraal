<% @phone_numbers.each do |phone_number| %>
    <div class="phone-number">
        <h4>
          <%= icon(name: "caret-right", class: "expand-icon") %>
          <span class="incoming-number"><%= phone_number.incoming_number %></span>
        </h4>

        <div class="details well">
            <%= render partial: "call_form" %>
            
            <hr>
            
            <%= render partial: "voicemail_listing", locals: {phone_number: phone_number} %>
            
            <hr>

            <%= bootstrap_form_for phone_number, class: "form-horizontal" do |f| %>
              <%= f.text_field :forwarding_number %>
              <%= f.on_off :forwarding, labelled: true %>
              <%= f.on_off :voicemail, labelled: true %>
              <%= f.save_changes %>
            <% end %>
        </div>
    </div>
<% end %>

<br>

<%= button icon(name: "refresh", label: "Sync Numbers"), sync_phone_numbers_path, method: :post, data: {"spin-on-click" => true, "click-text" => "Syncing..."} %>

<% content_for :inline_js do %>
  <script>
    $(document).ready(function(){
        <% client = PhoneNumber.first.client("js") %>
        Twilio.Device.setup("<%= client.token %>");
        window.connection = null;
        var callStatusUpdaterInterval = null;

        setInterval(function() { console.log(connection.status()); }, 1000);

        function updateStatus(message) {
            $('#status').text(message);
        }

        function setStatusReady() {
            showButton("start-call");
            updateStatus("Ready to start call");
        }
        
        // UI Fanciness
        $(document).on("click", "#start-call", function() {
            params = {"OutgoingNumber" : $("#outgoing-number").first().val()};
            connection = Twilio.Device.connect(params);
        });

        $(document).on("click", "#hangup", function() {  
            Twilio.Device.disconnectAll();
        });

        $("#call-form").submit(function() {
          $("#start-call").click();
          return false;
        });

        // Twilio.Device callbacks
        Twilio.Device.ready(function (device) {
            var pingClient = function() {
                $.post("<%= "/client_ping/#{client.identifier}" %>");
            }

            setInterval(pingClient, 120000); // ping server every 2 minutes
            pingClient();
            setStatusReady();
        });
     
        Twilio.Device.incoming(function (incomingConnection) {
            var callFrom = incomingConnection.parameters.From;
            updateStatus("Incoming call from " + callFrom + "...");
            showButton("answer");
            $("#answer").click(function() {
                console.log("You just clicked answer!");
                connection = incomingConnection;
                console.log(incomingConnection.accept());
                // startCallStatus(connection.parameters.From);
            });
        });

        Twilio.Device.cancel(function (cancelledConnection) {
            setStatusReady();
        });
     
        Twilio.Device.offline(function (device) {
            updateStatus('Offline');
        });
     
        Twilio.Device.error(function (error) {
            console.log("A Twilio error occurred");
            console.log(error);
            updateStatus(error);
        });
     
        Twilio.Device.connect(function (conn) {
            updateStatus("Successfully established call");
            console.log("I just connected a call: ");
            console.log(conn.parameters);
            startCallStatus(conn.parameters.From);
            showButton("hangup");
        });
     
        Twilio.Device.disconnect(function (conn) {
            stopCallStatus();
        });

        function startCallStatus(connectedWith) {
            var callStartTime = new Date().getTime();
            callStatusUpdaterInterval = setInterval(function() {
                var message = connectedWith + " â€” " + timerDisplay(callStartTime);
                updateStatus(message);
            }, 500);
        }

        function stopCallStatus() {
            clearInterval(callStatusUpdaterInterval);
            updateStatus("Call ended");
            setTimeout(setStatusReady, 2000);
            showButton("start-call");
        }
         
        function showButton(name){
            $('#start-call').hide();
            $('#hangup').hide();
            $('#answer').hide();
            $('#' + name).show();
        }

        function timerDisplay(startTime) {
            var duration = secondsSinceTime(startTime);
            var minutes = Math.floor(duration / 60);
            var seconds = duration % 60;
            if(seconds.toString().length == 1) {
                seconds = "0" + seconds;
            }
            return minutes + ":" + seconds;
        }

        function secondsSinceTime(time) {
            var seconds = (new Date().getTime() - time) / 1000;
            return Math.floor(seconds);
        }
    });
  </script>
<% end %>